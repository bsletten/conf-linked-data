import org.netkernel.rdf.jena.rep.*;

def resource = context.source("arg:resource");
def preferred = context.source("httpRequest:/accept/preferred")
def mimeType
	
def resp
def rdf
	
switch(preferred) {
	case "*/*":
	mimeType = "application/rdf+xml"
	break;
	
	case "application/rdf+xml":
	case "text/turtle":
	case "text/plain":
	case "text/n3":
	case "application/ld+json":
	mimeType = preferred
	break;
	
	default:
	break;
}

if(!mimeType) {
	context.sink("httpResponse:/code",406);
	context.createResponseFrom(
"""Invalid MIME Type: ${preferred}.
Options: application/rdf+xml, text/turtle, text/plain, text/n3, application/ld+json
""".toString())
	return
}


def req = context.createRequest("active:dataversity-conferences")
def model = context.issueRequest(req)
	
def res = "http://data.semanticweb.com/resource/${resource}"
	
req = context.createRequest("active:dataversity-resource-model")
req.addArgument("resource", res)
	
def jenaRep = context.issueRequest(req)
	
if(!jenaRep.getModel().isEmpty()) {
		
	def serializer = "active:jRDFSerializeXML"
	
	switch(mimeType) {
		case "text/turtle":
		serializer = "active:jRDFSerializeTURTLE"
		break;
		case "text/plain":
		serializer = "active:jRDFSerializeN-TRIPLE"	
		break;
		case "text/n3":
		serializer = "active:jRDFSerializeN3"		
		break;
		case "application/ld+json":
		serializer = "active:jRDFSerializeJSONLD"	
		break;
		default:
		println "UNEXPECTED MIME TYPE: ${mimeType}"
		break;
	}
	
	req = context.createRequest(serializer)
	req.addArgumentByValue("operand", jenaRep)
	resp = context.issueRequest(req)
	
	resp = context.createResponseFrom(resp)
	resp.setMimeType(mimeType)
} else {
	resp = context.createResponseFrom("Resource: ${res} not found.")
	resp.setMimeType("text/plain")
	context.sink("httpResponse:/code",404)
}

	
